/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.sql.ResultSet;
import java.text.ParseException;
import java.util.Date;
import java.util.regex.Pattern;
import static project.DBLoginData.*;

/**
 *
 * @author Htet Htet 
 */
public class Add_appointment extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement stmt = null;
    String id;
    Doctor doctor;

    private Add_appointment() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     *
     * @param query sql query that is to be executed
     * @param column column of the database table
     * @return String
     * @throws ClassNotFoundException
     */
    
    //Method to connect to Database and fetch a data 
    public String database(String query, String column) throws ClassNotFoundException {
        String data = null;
        Connection conn = null;
        PreparedStatement stmt = null;
        Class.forName("com.mysql.cj.jdbc.Driver");
        try {
            conn = (Connection) DriverManager.getConnection(url, uname, password);
            stmt = conn.prepareStatement(query);
            stmt.setString(1, id);                           
            ResultSet rs = stmt.executeQuery();
            rs.next();
            data = rs.getString(column);

        } catch (SQLException ex) {
        }
        return data;
    }

    /**
     *
     * @param ID patient ID
     * @param doc Data of the doctor
     */
    public Add_appointment(String ID, Doctor doc) {
        id = ID;
        initComponents();
        doctor = doc;
        //only able to choose current date and future dates
        jDateChooser1.setMinSelectableDate(new Date());
        // To get window in center
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1_time = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jComboBox1_reminder = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(235, 248, 254));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add an Appointment");
        jLabel1.setToolTipText("");

        jTextField1_time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1_timeActionPerformed(evt);
            }
        });

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1_reminder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 week", "3 days", "1 hour", "10 minutes" }));
        jComboBox1_reminder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1_reminderActionPerformed(evt);
            }
        });

        jLabel2.setText("Reminder");

        jLabel3.setText("Time");

        jLabel4.setText("Date");

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("HH:MM:SS");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pharmacy.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 66, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                                .addGap(28, 28, 28)
                                .addComponent(jComboBox1_reminder, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1_time, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox1_reminder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))))))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int response = JOptionPane.showConfirmDialog(this, "Do you want to add your Appointment?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {

            //Error Message if the time is empty
            if (jTextField1_time.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Time is empty");
            }
            //Error Message if the time is incorrect for example: 28:00:00
            if(!(Pattern.matches("(?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9])",jTextField1_time.getText()))){
                                      
                JOptionPane.showMessageDialog(null, "Please change your Time!");
            }
            
            else {
                try {

                    //Register Driver Class
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    //Query to insert into Database table app
                    String query = "INSERT INTO app(ID,last_name,Date,Time,Reminder,doctor_name,doctor_address) VALUES (?,?,?,?,?,?,?);";
                    //Connection to the Database
                    conn = (Connection) DriverManager.getConnection(url, uname, password);
                    stmt = conn.prepareStatement(query);

                    //Get last name from Database
                    String name = database("SELECT last_name from register where ID = ?", "last_name");
                    //Get doctor name and address
                    String doctor_name = doctor.getName();
                    String doctor_address = doctor.getAddress();

                    //Current Date and Time
                    Date now = new Date();
                    //Get the Date that is choosen by the user and formatted it to dd-MM-yyyy
                    Date datum = jDateChooser1.getDate();

                    //Error if the Date is empty
                    if (datum == null) {
                        JOptionPane.showMessageDialog(null, "Date is empty");
                    } 
                    
                    else {
                        //Taking the choosen Date and formatting it in dd-MM-yyyy
                        String date = new SimpleDateFormat("dd-MM-yyyy").format(datum);
                        //Get the Reminder time choose by the user      
                        String reminder = jComboBox1_reminder.getSelectedItem().toString();
                        //Get the appointment time that is given by the user
                        String time = jTextField1_time.getText();

                        //startdata = appointment date+ appointment time
                        Date startdata;
                        startdata = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").parse(date + " " + time);
                        //Convert Date to String
                        String date_ = new SimpleDateFormat("dd-MM-yyy HH:mm:ss").format(startdata);
                        //Simple print statement to check the results
                        System.out.println("Appointment date:" + date_);
                        //Get the appointment Date and time in milliseconds 
                        long time2 = startdata.getTime();
                        //Remindertime change according to choice of user
                        int remindertype = 0;

                        switch (reminder) {
                            case "1 week" -> {
                                remindertype = 1;
                                time2 = time2 - (7 * 24 * 60 * 60 * 1000);
                            }
                            case "3 days" -> {
                                remindertype = 2;
                                time2 = time2 - (3 * 24 * 60 * 60 * 1000);

                            }
                            case "1 hour" -> {
                                remindertype = 3;
                                time2 = time2 - (60 * 60 * 1000);

                            }
                            case "10 minutes" -> {
                                remindertype = 4;
                                time2 = time2 - (10 * 60 * 1000);

                            }

                        }
                        //Time2 will be converted into Date and formatted into dd-MM-yyyy HH:mm:ss
                        Date remindert = new Date(time2);
                        
                        //reminders = the time that sent the reminder mail
                        String reminders = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(remindert);

                        System.out.println("Confirmation:" + now);
                        System.out.println("Reminder:" + reminders);

                        //if the appointment date is before current time-> Error Message
                        if (now.compareTo(startdata) > 0) {
                            JOptionPane.showMessageDialog(null, "Please change to appropriate Time");
                        } 
                        
                        //if the remindertime is before the current time -> Error Message
                        else if (now.compareTo(remindert) > 0) {
                            JOptionPane.showMessageDialog(null, "Please change to appropriate Reminder time");
                        } 
                        
                        else {
                            JOptionPane.showMessageDialog(null, "Added an Appointment");
                            //Insert those values into Database table "app"
                            stmt.setString(1, id);
                            stmt.setString(2, name);
                            stmt.setString(3, date);
                            stmt.setString(4, time);
                            stmt.setString(5, reminder);
                            stmt.setString(6, doctor_name);
                            stmt.setString(7, doctor_address);
                            stmt.executeUpdate();

                            //Get the mail address from Database 
                            String mail = database("SELECT email from register where ID = ?", "email"); //Änderung 11.01.2022
                            //revoke method from class Email
                            Email mail_ = new Email(date, time, mail, id);

                            //Confirmation mail 
                            mail_.senden(4);
                            //Remindermail according to choosen Remindertype
                            mail_.reminder_funktion(remindertype, remindert);

                            //After an Appointment is added forwarded to PDF Page
                            PopUp_pdf pdf = new PopUp_pdf(id);
                            pdf.setVisible(true);
                            setVisible(false);

                        }
                    }

                } catch (SQLException | ClassNotFoundException | ParseException ex) {
                    Logger.getLogger(Add_appointment.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    //Connection close
                    conn.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Add_appointment.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1_timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1_timeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1_timeActionPerformed

    private void jComboBox1_reminderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1_reminderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1_reminderActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        LoggedinAsPatient app = new LoggedinAsPatient(id);
        app.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Add_appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Add_appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Add_appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Add_appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Add_appointment().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1_reminder;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1_time;
    // End of variables declaration//GEN-END:variables
}
